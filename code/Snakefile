
configfile: "config/config.yaml"


include: "rules/common.py"


wildcard_constraints:
    sample="|".join(samples.index),
    BP_group="|".join(samples["BP_group"].unique()),


ruleorder: MakeChrSizes_fromFirstBamProvided > MakeChrSizes_fromRefFa
ruleorder: CopyBamFromSampleList > CopyBamFromAlignedFastq
ruleorder: Get3ssMinusOnePosition_FromBed_ToDetermineWindows > Get3ssMinusOnePosition_FromGtf_ToDetermineWindows


rule all:
    input:
        expand(
            "BP_calling/{BP_group}/CalledBranchesMerged.bed.gz",
            BP_group=samples["BP_group"].unique(),
        ),


include: "rules/Alignment.smk"


rule CopyBamFromSampleList:
    input:
        bam=lambda wildcards: require_at_least_one(
            samples.loc[wildcards.sample]["Bam_file"]
        ),
    output:
        bam="Alignments/Final/{sample}.bam",
    log:
        "logs/GetBamAndIndex/{sample}.log",
    shell:
        """
        cp {input.bam} {output.bam}
        """


rule CopyBamFromAlignedFastq:
    input:
        bam="Alignments/STAR_Align/{sample}/Aligned.sortedByCoord.out.dedup.bam",
    output:
        bam="Alignments/Final/{sample}.bam",
    log:
        "logs/CopyBamFromAlignedFastq/{sample}.log",
    shell:
        """
        cp {input.bam} {output.bam}
        """


rule indexBam:
    input:
        bam="Alignments/Final/{sample}.bam",
    output:
        bai="Alignments/Final/{sample}.bam.bai",
    shell:
        """
        samtools index {input.bam}
        """


rule MergeBamsByBP_Group:
    input:
        bams=GetBamList_For_BP_group,
        bais=GetBaiList_For_BP_group,
    output:
        bam="BP_calling/{BP_group}/Merged.bam",
        bai="BP_calling/{BP_group}/Merged.bam.bai",
    shell:
        """
        samtools merge {output.bam} {input.bams}
        samtools index {output.bam}
        """


rule MakeChrSizes_fromFirstBamProvided:
    input:
        bam=samples["Bam_file"][0],
    output:
        "Misc/Chrome.sizes",
    shell:
        """
        samtools view -H {input} | grep '^@SQ' | sed 's/@SQ\\tSN://' | sed 's/LN://' > {output}
        """


rule MakeChrSizes_fromRefFa:
    input:
        ref_fa=config["fasta"],
    output:
        "Misc/Chrome.sizes",
    shell:
        """
        samtools faidx -o {output} {input.ref_fa}
        """

rule Get3ssMinusOnePosition_FromGtf_ToGetBPToAnnotated3ssDist:
    input:
        gtf=config["gtf"],
        chromsizes="Misc/Chrome.sizes",
    output:
        ThressSS="Misc/ThreePrimeSS_FromGtf.bed",
    shadow: "shallow"
    shell:
        """
        scripts/gtf2leafcutter.pl -o Misc/leafcutter_parsed {input.gtf}
        zcat Misc/leafcutter_parsed_all_introns.bed.gz | awk -F'\\t' -v OFS='\\t' '$6=="+" {{ print $1,$3-2,$3-1,$4,$5,$6 }} $6=="-" {{ print $1,$2,$2+1,$4,$5,$6 }}' | sort -t$'\\t' -u -k1,3 -k6,6 | bedtools sort -i - -g {input.chromsizes} > {output.ThressSS}
        """

rule Get3ssMinusOnePosition_FromGtf_ToDetermineWindows:
    input:
        gtf=config["gtf"],
        chromsizes="Misc/Chrome.sizes",
    output:
        ThressSS="Misc/ThreePrimeSS.bed",
    shadow: "shallow"
    shell:
        """
        scripts/gtf2leafcutter.pl -o Misc/leafcutter_parsed {input.gtf}
        zcat Misc/leafcutter_parsed_all_introns.bed.gz | awk -F'\\t' -v OFS='\\t' '$6=="+" {{ print $1,$3-2,$3-1,$4,$5,$6 }} $6=="-" {{ print $1,$2,$2+1,$4,$5,$6 }}' | sort -t$'\\t' -u -k1,3 -k6,6 | bedtools sort -i - -g {input.chromsizes} > {output.ThressSS}
        """

rule Get3ssMinusOnePosition_FromBed_ToDetermineWindows:
    input:
        bed=require_at_least_one([str(config["IntronsBed"])]),
        chromsizes="Misc/Chrome.sizes",
    output:
        ThressSS="Misc/ThreePrimeSS.bed",
    shell:
        """
        awk -F'\\t' -v OFS='\\t' '$6=="+" {{ print $1,$3-1,$3,$4,$5,$6 }} $6=="-" {{ print $1,$2,$2+1,$4,$5,$6 }}' {input.bed} | sort | uniq | bedtools sort -i - -g {input.chromsizes} > {output.ThressSS}
        """

rule GetU12Introns:
    output:
        "Misc/U12Introns.bed",
    shell:
        "wget -O {output} --no-check-certificate 'https://midb.pnb.uconn.edu/download/hg38Ens95_MinorIntronsPWM_CanonicalIsoform.bed'"


rule Get3ssWindows:
    """
    Get window of regions from UpstreamEdge (eg 100bp from branch) to
    DownstreamEdge (eg 10 bp from branch) from each 3'ss. Save window
    coordinates as feature name, and u2 or u12 intron type.
    """
    input:
        chromsizes="Misc/Chrome.sizes",
        U12Ints="Misc/U12Introns.bed",
        ThressSS="Misc/ThreePrimeSS.bed",
    output:
        Upstream3ssWindows="Misc/3ssWindows.bed",
    params:
        UpstreamEdge=config["UpstreamEdge"],
        DownstreamEdge=config["DownstreamEdge"],
    shell:
        """
        awk -F'\\t' -v OFS='\\t' '$6=="+" {{ print $1,$3-{params.UpstreamEdge}, $3-{params.DownstreamEdge},$4,$5,$6 }} $6=="-" {{ print $1,$2+{params.DownstreamEdge},$2+{params.UpstreamEdge}, $4, $5,$6 }}' {input.ThressSS} | awk -F'\\t' -v OFS='\\t' '{{ print $1,$2,$3,$4"_"$1"_"$2"_"$3"_"$6, $5,$6}}' | bedtools intersect -a - -b {input.U12Ints} -s -c -f 1 | awk -F'\\t' -v OFS='\\t' '$7!=0 {{ print $1,$2,$3,$4"_u12",$5,$6 }} $7==0 {{ print $1,$2,$3,$4"_u2",$5,$6 }}' | bedtools sort -i - -g {input.chromsizes} > {output.Upstream3ssWindows}
        """


rule GrabReadStartsForReadsThatCross3ss:
    """
    In this rule, grab the reads that cross 3'ss in actual sequenced read.
    Minus strand needs to shift two to left
    Plus strand needs to shift one to left.
    Outputting a bam is useful for visualizing w/ IGV or pygenometracks
    """
    input:
        ThressSS="Misc/ThreePrimeSS.bed",
        bam="BP_calling/{BP_group}/Merged.bam",
        bai="BP_calling/{BP_group}/Merged.bam.bai",
        chromsizes="Misc/Chrome.sizes",
    output:
        Plus="BP_calling/{BP_group}/ReadsInWindows.plus.bed",
        Minus="BP_calling/{BP_group}/ReadsInWindows.minus.bed",
        PlusBam="BP_calling/{BP_group}/PlusCross3ss.bam",
        MinusBam="BP_calling/{BP_group}/MinusCross3ss.bam",
    log:
        "logs/GrabReadStartsForReadsThatCross3ss/{BP_group}.log",
    shell:
        """
        set +o pipefail;
        (samtools view -f99 -F256 -bh {input.bam} | bedtools intersect -a - -b {input.ThressSS} -split -s -sorted -g {input.chromsizes} | tee {output.PlusBam} | samtools view - | awk -F'\\t' -v OFS='\\t' '{{if($6~"^1S") Clip="T"; else Clip="F"; print $3,$4-1,$4,$1,Clip";"$4+$9-1,"+"}}' > {output.Plus} ) &> {log}
        samtools view -f83 -F256 -bh {input.bam} | bedtools intersect -a - -b {input.ThressSS} -split -s -sorted -g {input.chromsizes} | tee {output.MinusBam} | samtools view - | awk -F'\\t' -v OFS='\\t' '{{if($6~"M1S$") Clip="T"; else Clip="F"; print $3,$8-$9-2,$8-$9-1,$1,Clip";"$8,"-"}}' > {output.Minus}
        """


rule IntersectReadStartsWithWindows:
    """
    In this rule, filter for reads that start within a 3'ss window.
    Keep reads with mismatches separate. That way, the pieces of information
    are more independent, better practice to prevent overfitting.
    Output contains 4 columns:
    3'ssWindow, 5'Pos(IndicatingBP), ReadName, [T|F indicating if mismatch at BP];3'Pos(indicating PolII Pos)
    """
    input:
        Upstream3ssWindows="Misc/3ssWindows.bed",
        chromsizes="Misc/Chrome.sizes",
        Plus="BP_calling/{BP_group}/ReadsInWindows.plus.bed",
        Minus="BP_calling/{BP_group}/ReadsInWindows.minus.bed",
    log:
        "logs/IntersectReadStartsWithWindows/{BP_group}.log",
    output:
        Intersected="BP_calling/{BP_group}/ColaPutativeBranchFragmentStarts.tab",
    shell:
        """
        (cat {input.Plus} {input.Minus} | bedtools sort -i - -g {input.chromsizes} | bedtools intersect -a {input.Upstream3ssWindows} -b - -wo -s -sorted -g {input.chromsizes} | awk -F'\\t' -v OFS='\\t' '{{ print $4, $8,$10,$11 }}' > {output.Intersected} ) &> {log}
        """


rule ColaWindowsPassReadFilter:
    """
    In this rule, output a bedfile of the 3'ss window regions that have enough
    putative lariat derived reads to consider for BP mapping
    """
    input:
        "BP_calling/{BP_group}/ColaPutativeBranchFragmentStarts.tab",
    output:
        "BP_calling/{BP_group}/Cola3ssWindowsPassReadFilter.list.txt",
    params:
        MinReadCount=config["MinCoverage"],
    shell:
        """
        awk -F'\\t' '{{print $1}}' {input} | sort | uniq -c | awk '$1 >{params.MinReadCount} {{ print $2 }}' > {output}
        """


rule LI_ELI_5Prime_BedgraphBigwig:
    """
    I useful file for debugging visually with IGV. A pileup bigwig of 5'ends of th eputative LI and ELI reads
    """
    input:
        Frags="BP_calling/{BP_group}/ColaPutativeBranchFragmentStarts.tab",
        Chroms="Misc/Chrome.sizes",
    output:
        bg="BP_calling/{BP_group}/ColaPutativeBranchFragmentStarts.bg",
        bw="BP_calling/{BP_group}/ColaPutativeBranchFragmentStarts.bw",
    shell:
        """
        awk -F'\\t' -v OFS='\\t' '{{split($1,a,"_"); print a[2],$2,$2+1}}' {input.Frags} | sort | uniq -c | awk -v OFS='\\t' '$2~"^chr" {{ print $2,$3,$4,$1 }}' | bedtools sort -i - > {output.bg}
        bedGraphToBigWig {output.bg} {input.Chroms} {output.bw}
        """


rule Get3ssRegionsFasta:
    """
    Need to obtain sequence for 3'ss windows in order score BP motif potential
    under each base in later step. This step may need tweaking if you were to change the left or right window edge in the config.
    """
    input:
        fasta=config["fasta"],
        bed="Misc/3ssWindows.bed",
        fai=config["fasta"] + ".fai",
    output:
        Windows_fasta="Misc/3ssWindows.bed.fasta",
        ExpandedWindow="Misc/3ssWindows.expanded.bed",
        ExpandedWindow_fasta="Misc/3ssWindows.expanded.bed.fasta",
    params:
        NumBasesTo3ss=config["DownstreamEdge"],
    shell:
        """
        bedtools getfasta -s -name -fi {input.fasta} -bed {input.bed} > {output.Windows_fasta}
        bedtools slop -s -r {params.NumBasesTo3ss} -l 10 -i {input.bed} -g {input.fai} | tee {output.ExpandedWindow} | bedtools getfasta -s -name -fi {input.fasta} -bed - > {output.ExpandedWindow_fasta}
        """


rule GetBradleyBranchesTrainingFeatures:
    input:
        fasta=config["fasta"],
        bed="../data/Bradley.hg38.bed",
        fai="Misc/Chrome.sizes",
        ThreeSS="Misc/ThreePrimeSS_FromGtf.bed",
        U12Introns="Misc/U12Introns.bed",
    output:
        bradley_weighted_bed="Misc/BradleyWeightedSubsample.bed",
        bradley_fasta="Misc/BradleyPentamers.fasta",
        bradley_distance_to_3ss="Misc/BradleyDistTo3ss.txt.gz",
    params:
        B=config["NumBasesBeforeA"],
        A=config["NumBasesAfterA"],
    shell:
        """
        cat {input.bed} | grep -v "alt" |bedtools intersect -a - -b <(awk -F'\\t' -v OFS='\\t' '$6=="-" {{print $1,$2,$2+30,$4,$5,$6}} $6=="+" {{print $1, $3-30, $3,$4,$5,$6}}' {input.U12Introns} ) -c | awk -F'\\t' -v OFS='\\t' '$7==0 {{print $1,$2,$3,"u2",$5,$6}} $7!=0 {{ print $1,$2,$3,"u12",$5,$6 }}' | awk -F'\\t' -v OFS='\\t' '{{ for(i=0;i<$5;i++)print }}' > {output.bradley_weighted_bed}
        bedtools slop -i {output.bradley_weighted_bed} -g {input.fai} -s -l {params.B} -r {params.A} | bedtools sort -i - -g {input.fai} |  bedtools getfasta -s -name -fi {input.fasta} -bed - > {output.bradley_fasta}
        cat {output.bradley_weighted_bed} | bedtools sort -i - -g {input.fai} | bedtools closest -iu -a - -b {input.ThreeSS} -s -d -D a -g {input.fai} | awk -F'\\t' '{{ print $4, $NF }}' | gzip - > {output.bradley_distance_to_3ss}
        """


rule ScoreBranchpointMotifs:
    """
    Score every position for BP motif.
    """
    input:
        bradley_fasta="Misc/BradleyPentamers.fasta",
        Windows_fasta="Misc/3ssWindows.expanded.bed.fasta",
        WindowsPassFilter="BP_calling/{BP_group}/Cola3ssWindowsPassReadFilter.list.txt",
    output:
        MotifProbabilityFunction="BP_calling/{BP_group}/MotifPerBaseScores.txt.gz",
    log:
        "logs/ScoreBranchpointMotifs/{BP_group}.log",
    params:
        # Because the sequence ctaAc should score high if we are considering
        # the A, which is offset from the beginning of the sequencing
        Offset=config["NumBasesBeforeA"],
    shell:
        """
        ./scripts/CalculateBPScore.py {params.Offset} {input.bradley_fasta} {input.Windows_fasta} {input.WindowsPassFilter} {output} &> {log}
        """


rule SumLogProbabilities:
    input:
        Frags="BP_calling/{BP_group}/ColaPutativeBranchFragmentStarts.tab",
        BpToDistanceTrainingData="Misc/BradleyDistTo3ss.txt.gz",
        MotifProbabilityFunction="BP_calling/{BP_group}/MotifPerBaseScores.txt.gz",
    log:
        "logs/SumLogProbabilities/{BP_group}.log",
    output:
        bed="BP_calling/{BP_group}/CalledBranchesUnmerged.bed.gz",
        AllScores="BP_calling/{BP_group}/BranchpointCallingAll.tab.gz",
    params:
        pseudocount=0.1,
        cola_smoothing_bandwith=0.5,
        MinReadsPerWindow=config["MinCoverage"],
        Window_ds_dist=config["DownstreamEdge"],
        Window_us_dist=config["UpstreamEdge"],
        Threshold=config["Threshold"],
        OutputBedgraphDebugs="FALSE",
    conda:
        "envs/R_env.yaml"
    shell:
        """
        Rscript scripts/ScoreBranchpointsComposite.R {input.Frags} BP_calling/{wildcards.BP_group}/ {params} &> {log}
        """


rule MergeCloseBranches:
    """
    Merge branches within Dist into a single branchpoint, picked as having the
    highest score in column 5
    """
    input:
        bed="BP_calling/{BP_group}/CalledBranchesUnmerged.bed.gz",
    output:
        bed="BP_calling/{BP_group}/CalledBranchesMerged.bed.gz",
    params:
        Dist=3,
    shell:
        """
        zcat {input.bed} | awk -F'\\t' -v OFS='\\t' '{{$5=sprintf("%.5f",$5); print $0}}' | bedtools merge -i - -d {params.Dist} -s -o count,max,first  -c 4,5,6 | bedtools intersect -a <(zcat {input.bed} | awk -F'\\t' -v OFS='\\t' '{{$5=sprintf("%.5f",$5); print $0}}') -b -  -wao -s | awk -F'\\t' -v OFS='\\t' '$5==$11 {{print $1,$2,$3,$4,$5,$6 }}' | gzip - > {output.bed}
        """

# TODO: write rules to count lariats in each sample at each called bp

# rule GetReadsForCountTable:
#     input:
#         Upstream3ssWindows = "Misc/3ssWindows.bed",
#         chromsizes = "Misc/Chrome.sizes",
#         Plus = "Misc/ReadsInWindows.plus.bed",
#         Minus = "Misc/ReadsInWindows.minus.bed",
#         Branchpoints = "BranchpointCalling/FinalModel/CalledBranches.0.01.merged.bed.gz",
#     output:
#         Intersected = "Misc/ColaPutativeBranchFragmentStarts.demultiplexed.tab.gz",
#     log:
#         "logs/GetReadsForCountTable.log"
#     shell:
#         """
#         cat Misc/ReadsInWindows.plus.bed Misc/ReadsInWindows.minus.bed | bedtools sort -i - -g Misc/Chrome.sizes | bedtools intersect -a Misc/3ssWindows.bed -b - -wo -s -sorted -g Misc/Chrome.sizes | awk -F'\\t' -v OFS='\\t' '{{ split($10,a,":"); split($11,b,";"); print $4, $8, a[9],b[2] }}' | sort | uniq -c | awk -v OFS='\\t' '{{split($2,a,"_"); print a[2],$3,$3+1,$1, $2";"$4";"$3";"$5,a[5]}}' | bedtools sort -i - | bedtools closest -a - -b <(zcat {input.Branchpoints} | bedtools sort -i -) -s -D b -t first | awk -F'\\t' -v OFS='\\t' '{{print $5,$4,$8,$13}}' | gzip - > {output.Intersected}
#         """
# rule MergeOverlappingBranchpointRegions:
#     input:
#         Upstream3ssWindows = "Misc/3ssWindows.bed",
#     output:
#         "../output/202012_Stuff/BranchpointRegionsMerged.bed.gz"
#     log:
#         "logs/MergeOverlappingBranchpointRegions.log"
#     shell:
#         """
#         bedtools merge -i {input.Upstream3ssWindows} -s -o distinct,distinct -c 6,4 | gzip - > {output}
#         """
# rule MakeBptCountTables:
#     input:
#         Intersected = "Misc/ColaPutativeBranchFragmentStarts.demultiplexed.tab.gz",
#         MergedRegions = "../output/202012_Stuff/BranchpointRegionsMerged.bed.gz"
#     output:
#         CountTables = expand("../output/202012_Stuff/BptCountTables.{ReadTypes}.txt.gz", ReadTypes = ['ELI', 'NLI_ELI', 'NLI']),
#         ClusterDescriptions = "../output/202012_Stuff/Bpt_Cluster_Descriptions.txt.gz"
#     log:
#         "logs/makebptcounttables.log"
#     shell:
#         """
#         /software/R-3.4.3-el7-x86_64/bin/Rscript scripts/CreateBranchpointCountTable.R &> {log}
#         """
